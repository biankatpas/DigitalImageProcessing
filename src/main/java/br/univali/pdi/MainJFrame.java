package br.univali.pdi;

import com.github.sarxos.webcam.Webcam;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author biankatpas
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MenuJFrame
     */
    public MainJFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setLayout(null);
        filtros = new Filtros();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfcSelecionaImagem = new javax.swing.JFileChooser();
        lbImagem2 = new javax.swing.JLabel();
        painelHistograma = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lbSaida = new javax.swing.JLabel();
        lbImagem1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        jmArquivo = new javax.swing.JMenu();
        jmAbrir = new javax.swing.JMenuItem();
        cbLigaWebcam = new javax.swing.JCheckBoxMenuItem();
        jmFiltros = new javax.swing.JMenu();
        jmZoom = new javax.swing.JMenu();
        jmZoomIn = new javax.swing.JMenuItem();
        jmZoomOut = new javax.swing.JMenuItem();
        jmCinza = new javax.swing.JMenu();
        jmCinzaPonderado = new javax.swing.JMenuItem();
        jmCinzaSimples = new javax.swing.JMenuItem();
        jmIncremento = new javax.swing.JMenu();
        jmIncrementoPercentual = new javax.swing.JMenuItem();
        jmIncrementoAbs = new javax.swing.JMenuItem();
        jmCanal = new javax.swing.JMenuItem();
        jmAdicao = new javax.swing.JMenu();
        jmAdicaoSimples = new javax.swing.JMenuItem();
        jmAdicaoPonderada = new javax.swing.JMenuItem();
        jmSubtracao = new javax.swing.JMenuItem();
        jmBG = new javax.swing.JMenu();
        jmAdaptativo = new javax.swing.JMenuItem();
        jmAlpha = new javax.swing.JMenuItem();
        jmNegativa = new javax.swing.JMenuItem();
        jmLimiarizacao = new javax.swing.JMenuItem();
        jmConvolucao = new javax.swing.JMenuItem();
        jmErosao = new javax.swing.JMenuItem();
        jmDilatacao = new javax.swing.JMenuItem();
        jmAbertura = new javax.swing.JMenuItem();
        jmFechamento = new javax.swing.JMenuItem();
        jmHistograma = new javax.swing.JMenuItem();
        jmSobel = new javax.swing.JMenuItem();
        jmRobinson = new javax.swing.JMenuItem();
        jmRoberts = new javax.swing.JMenuItem();
        jmAjuda = new javax.swing.JMenu();
        jmSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PDI Filtros");
        setLocationByPlatform(true);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        lbImagem2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbImagem2.setToolTipText("");
        lbImagem2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbImagem2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbImagem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbImagem2MouseClicked(evt);
            }
        });
        getContentPane().add(lbImagem2);
        lbImagem2.setBounds(500, 20, 450, 240);

        painelHistograma.setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        painelHistograma.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(painelHistograma);
        painelHistograma.setBounds(500, 300, 450, 260);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(470, 10, 10, 550);

        lbSaida.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbSaida.setToolTipText("");
        lbSaida.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbSaida.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbSaida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbSaidaMouseClicked(evt);
            }
        });
        getContentPane().add(lbSaida);
        lbSaida.setBounds(10, 300, 440, 260);

        lbImagem1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbImagem1.setToolTipText("");
        lbImagem1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbImagem1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbImagem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbImagem1MouseClicked(evt);
            }
        });
        getContentPane().add(lbImagem1);
        lbImagem1.setBounds(10, 20, 440, 240);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(10, 273, 940, 10);

        jLabel2.setText("Imagem de entrada 1");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 0, 150, 20);

        jLabel3.setText("Imagem de entrada 2");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(520, 0, 150, 20);

        jLabel4.setText("Imagem com filtro");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 280, 140, 20);

        jLabel5.setText("Histograma RGB");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(510, 280, 130, 20);

        jmArquivo.setText("Arquivo");

        jmAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jmAbrir.setText("Abrir imagem");
        jmAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAbrirActionPerformed(evt);
            }
        });
        jmArquivo.add(jmAbrir);

        cbLigaWebcam.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        cbLigaWebcam.setText("Capturar da WebCam");
        cbLigaWebcam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLigaWebcamActionPerformed(evt);
            }
        });
        jmArquivo.add(cbLigaWebcam);

        menu.add(jmArquivo);

        jmFiltros.setText("Filtros");

        jmZoom.setText("Zoom");

        jmZoomIn.setText("in");
        jmZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmZoomInActionPerformed(evt);
            }
        });
        jmZoom.add(jmZoomIn);

        jmZoomOut.setText("out");
        jmZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmZoomOutActionPerformed(evt);
            }
        });
        jmZoom.add(jmZoomOut);

        jmFiltros.add(jmZoom);

        jmCinza.setText("Tons de cinza");

        jmCinzaPonderado.setText("Ponderado");
        jmCinzaPonderado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCinzaPonderadoActionPerformed(evt);
            }
        });
        jmCinza.add(jmCinzaPonderado);

        jmCinzaSimples.setText("Simples");
        jmCinzaSimples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCinzaSimplesActionPerformed(evt);
            }
        });
        jmCinza.add(jmCinzaSimples);

        jmFiltros.add(jmCinza);

        jmIncremento.setText("Incremento");

        jmIncrementoPercentual.setText("Percentual");
        jmIncrementoPercentual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmIncrementoPercentualActionPerformed(evt);
            }
        });
        jmIncremento.add(jmIncrementoPercentual);

        jmIncrementoAbs.setText("Absoluto");
        jmIncrementoAbs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmIncrementoAbsActionPerformed(evt);
            }
        });
        jmIncremento.add(jmIncrementoAbs);

        jmFiltros.add(jmIncremento);

        jmCanal.setText("Canal");
        jmCanal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCanalActionPerformed(evt);
            }
        });
        jmFiltros.add(jmCanal);

        jmAdicao.setText("Adição");

        jmAdicaoSimples.setText("Adição Simples");
        jmAdicaoSimples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAdicaoSimplesActionPerformed(evt);
            }
        });
        jmAdicao.add(jmAdicaoSimples);

        jmAdicaoPonderada.setText("Adição Ponderada");
        jmAdicaoPonderada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAdicaoPonderadaActionPerformed(evt);
            }
        });
        jmAdicao.add(jmAdicaoPonderada);

        jmFiltros.add(jmAdicao);

        jmSubtracao.setText("Subtração");
        jmSubtracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSubtracaoActionPerformed(evt);
            }
        });
        jmFiltros.add(jmSubtracao);

        jmBG.setText("BG");

        jmAdaptativo.setText("BG Adaptativo");
        jmAdaptativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAdaptativoActionPerformed(evt);
            }
        });
        jmBG.add(jmAdaptativo);

        jmAlpha.setText("BG Alpha");
        jmAlpha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAlphaActionPerformed(evt);
            }
        });
        jmBG.add(jmAlpha);

        jmFiltros.add(jmBG);

        jmNegativa.setText("Negativa");
        jmNegativa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmNegativaActionPerformed(evt);
            }
        });
        jmFiltros.add(jmNegativa);

        jmLimiarizacao.setText("Limiarização");
        jmLimiarizacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmLimiarizacaoActionPerformed(evt);
            }
        });
        jmFiltros.add(jmLimiarizacao);

        jmConvolucao.setText("Convolução");
        jmConvolucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmConvolucaoActionPerformed(evt);
            }
        });
        jmFiltros.add(jmConvolucao);

        jmErosao.setText("Erosão");
        jmErosao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmErosaoActionPerformed(evt);
            }
        });
        jmFiltros.add(jmErosao);

        jmDilatacao.setText("Dilatação");
        jmDilatacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmDilatacaoActionPerformed(evt);
            }
        });
        jmFiltros.add(jmDilatacao);

        jmAbertura.setText("Abertura");
        jmAbertura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAberturaActionPerformed(evt);
            }
        });
        jmFiltros.add(jmAbertura);

        jmFechamento.setText("Fechamento");
        jmFechamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmFechamentoActionPerformed(evt);
            }
        });
        jmFiltros.add(jmFechamento);

        jmHistograma.setText("Histograma");
        jmHistograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmHistogramaActionPerformed(evt);
            }
        });
        jmFiltros.add(jmHistograma);

        jmSobel.setText("Sobel");
        jmSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSobelActionPerformed(evt);
            }
        });
        jmFiltros.add(jmSobel);

        jmRobinson.setText("Robinson");
        jmRobinson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmRobinsonActionPerformed(evt);
            }
        });
        jmFiltros.add(jmRobinson);

        jmRoberts.setText("Roberts");
        jmRoberts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmRobertsActionPerformed(evt);
            }
        });
        jmFiltros.add(jmRoberts);

        menu.add(jmFiltros);

        jmAjuda.setText("Ajuda");

        jmSobre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jmSobre.setText("Sobre");
        jmSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSobreActionPerformed(evt);
            }
        });
        jmAjuda.add(jmSobre);

        menu.add(jmAjuda);

        setJMenuBar(menu);

        setBounds(0, 0, 969, 631);
    }// </editor-fold>//GEN-END:initComponents

    private void jmNegativaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmNegativaActionPerformed
        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        exibeImagem(lbImagem1, capturar());
                        exibeImagem(lbSaida, filtros.negativa(capturar()));
                    }
                }
            }.start();

        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.negativa(imagem);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmNegativaActionPerformed

    private void jmCinzaPonderadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCinzaPonderadoActionPerformed

        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.cinzaPonderado(frame));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.cinzaPonderado(imagem);
            exibeImagem(lbSaida, imagem);
        }

    }//GEN-LAST:event_jmCinzaPonderadoActionPerformed

    private void jmLimiarizacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmLimiarizacaoActionPerformed

        int t = Integer.parseInt(JOptionPane.showInputDialog("Limiarização", "Informe o valor do t"));

        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.limiarizacao(frame, t));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.limiarizacao(imagem, t);
            exibeImagem(lbSaida, imagem);
        }

    }//GEN-LAST:event_jmLimiarizacaoActionPerformed

    private void jmSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSobreActionPerformed
        JOptionPane.showMessageDialog(null, "Versão 2\nDesenvolvido por Bianka Passos");
    }//GEN-LAST:event_jmSobreActionPerformed

    private void jmAdicaoSimplesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAdicaoSimplesActionPerformed
        if (cbLigaWebcam.isSelected()) {
            JOptionPane.showMessageDialog(null, "Filtro não disponível para WebCam");
        } else {
            BufferedImage img1 = filtros.abrirImagem(selecionaImagem());
            exibeImagem(lbImagem1, img1);
            BufferedImage img2 = filtros.abrirImagem(selecionaImagem());
            exibeImagem(lbImagem2, img2);
            imagem = filtros.adicaoSimples(img1, img2);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmAdicaoSimplesActionPerformed

    private void jmSubtracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSubtracaoActionPerformed
        if (cbLigaWebcam.isSelected()) {
            JOptionPane.showMessageDialog(null, "Filtro não disponível para WebCam");
        } else {
            BufferedImage img1 = filtros.abrirImagem(selecionaImagem());
            exibeImagem(lbImagem1, img1);
            BufferedImage img2 = filtros.abrirImagem(selecionaImagem());
            exibeImagem(lbImagem2, img2);
            imagem = filtros.subtracao(img1, img2);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmSubtracaoActionPerformed

    private void jmCanalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCanalActionPerformed
        String canal = JOptionPane.showInputDialog("Canal", "red, green ou blue");

        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.canal(frame, canal));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.canal(imagem, canal);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmCanalActionPerformed

    private void jmIncrementoPercentualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmIncrementoPercentualActionPerformed

        String canal = JOptionPane.showInputDialog("Canal", "red, green ou blue");
        float incremento = Float.parseFloat(JOptionPane.showInputDialog("Incremento", "percentual de incremento"));

        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.incrementoPercentual(frame, canal, incremento));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.incrementoPercentual(imagem, canal, incremento);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmIncrementoPercentualActionPerformed

    private void jmAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAbrirActionPerformed
        cbLigaWebcam.setSelected(false);
        imagem = filtros.abrirImagem(selecionaImagem());
        exibeImagem(lbImagem1, imagem);
    }//GEN-LAST:event_jmAbrirActionPerformed

    private void lbImagem2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbImagem2MouseClicked
        if (1 == evt.getButton()) {
            Point p = evt.getLocationOnScreen();
            filtros.pixel(p, imagem);
        }
    }//GEN-LAST:event_lbImagem2MouseClicked

    private void jmCinzaSimplesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCinzaSimplesActionPerformed
        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.cinzaSimples(frame));
                    }
                }

            }.start();

        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.cinzaSimples(imagem);
            exibeImagem(lbSaida, imagem);
        }

    }//GEN-LAST:event_jmCinzaSimplesActionPerformed

    private void jmHistogramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmHistogramaActionPerformed
        Histogram hst = new Histogram();

        if (cbLigaWebcam.isSelected()) {
            int time = 0;
            while (time < 300) {
                frame = capturar();
                hst.display(frame, painelHistograma);
                exibeImagem(lbImagem1, frame);
                lbImagem1.paintAll(lbSaida.getGraphics());
                time++;
            }

        } else {
            exibeImagem(lbImagem1, imagem);
            hst.display(imagem, painelHistograma);
        }
    }//GEN-LAST:event_jmHistogramaActionPerformed

    private void jmZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmZoomInActionPerformed
        if (cbLigaWebcam.isSelected()) {
            JOptionPane.showMessageDialog(null, "Filtro não disponível na WebCam");
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.zoomIn(imagem);
            exibeImagem(lbSaida, imagem);
        }

    }//GEN-LAST:event_jmZoomInActionPerformed

    private void jmAdaptativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAdaptativoActionPerformed
        //10 frames somados / 10 = mostra na tela (media)
        ArrayList<BufferedImage> frames = new ArrayList<>();
        BufferedImage saida = new BufferedImage(capturar().getWidth(), capturar().getHeight(), 5);
        webcam.close();
        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {

                        if (frames.size() < 10) {
                            for (int i = frames.size(); i < 10; i++) {
                                frames.add(capturar());
                            }

                        } else {
                            exibeImagem(lbImagem1, capturar());
                            filtros.bgAdaptativo(frames, saida);
                            exibeImagem(lbSaida, saida);
                            frames.remove(0);
                        }
                    }
                }
            }.start();

        } else {
            JOptionPane.showMessageDialog(null, "Filtro disponível apenas para WebCam");
        }


    }//GEN-LAST:event_jmAdaptativoActionPerformed

    private void jmAlphaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAlphaActionPerformed
        // TODO add your handling code here:
        //im = (frame atual * 0,1) + im*0,9
        BufferedImage saida = new BufferedImage(capturar().getWidth(), capturar().getHeight(), 5);
        webcam.close();
        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        filtros.bgAlpha(frame, saida);
                        exibeImagem(lbSaida, saida);
                    }
                }
            }.start();
        } else {
            JOptionPane.showMessageDialog(null, "Filtro disponível apenas para WebCam");
        }


    }//GEN-LAST:event_jmAlphaActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CAPTURAR = false;
            webcam.close();
        }

    }//GEN-LAST:event_formKeyPressed

    private void jmZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmZoomOutActionPerformed
        if (cbLigaWebcam.isSelected()) {
            JOptionPane.showMessageDialog(null, "Filtro não disponível na WebCam");
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.zoomOut(imagem);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmZoomOutActionPerformed

    private void jmDilatacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmDilatacaoActionPerformed
        int t = Integer.parseInt(JOptionPane.showInputDialog("Dilatação", "Informe o T da imagem linearizada de entrada"));
        int mtz = Integer.parseInt(JOptionPane.showInputDialog("Dilatação", "Informe a ordem da matriz"));

        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.abertura(frame, mtz, t));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.dilatacao(imagem, mtz, t);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmDilatacaoActionPerformed

    private void jmIncrementoAbsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmIncrementoAbsActionPerformed
        String canal = JOptionPane.showInputDialog("Canal", "red, green ou blue");
        int incremento = Integer.parseInt(JOptionPane.showInputDialog("Incremento", "valor do incremento"));

        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.incrementoAbs(frame, canal, incremento));
                    }
                }
            }.start();

        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.incrementoAbs(imagem, canal, incremento);
            exibeImagem(lbSaida, imagem);
        }

    }//GEN-LAST:event_jmIncrementoAbsActionPerformed

    private void jmErosaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmErosaoActionPerformed
        int mtz = Integer.parseInt(JOptionPane.showInputDialog("Erosao", "informe a ordem da matriz"));
        int t = Integer.parseInt(JOptionPane.showInputDialog("Erosao", "limiarizadao da imagem de entrada"));

        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.erosao(frame, mtz, t));
                    }
                }
            }.start();

        } else {

            exibeImagem(lbImagem1, imagem);
            imagem = filtros.erosao(imagem, mtz, t);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmErosaoActionPerformed

    private void jmConvolucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmConvolucaoActionPerformed

        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.convolucao(frame));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.convolucao(imagem);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmConvolucaoActionPerformed

    private void jmAberturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAberturaActionPerformed
        int mtz = Integer.parseInt(JOptionPane.showInputDialog("Abertura", "informe a ordem da matriz"));
        int t = Integer.parseInt(JOptionPane.showInputDialog("Abertura", "limiarizadao da imagem de entrada"));

        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.abertura(frame, mtz, t));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.abertura(imagem, mtz, t);
            exibeImagem(lbSaida, imagem);
        }

    }//GEN-LAST:event_jmAberturaActionPerformed

    private void jmFechamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmFechamentoActionPerformed
        int mtz = Integer.parseInt(JOptionPane.showInputDialog("Fechamento", "informe a ordem da matriz"));
        int t = Integer.parseInt(JOptionPane.showInputDialog("Fechamento", "limiarizadao da imagem de entrada"));
        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.fechamento(frame, mtz, t));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.fechamento(imagem, mtz, t);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmFechamentoActionPerformed

    private void jmAdicaoPonderadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAdicaoPonderadaActionPerformed
        if (cbLigaWebcam.isSelected()) {
            JOptionPane.showMessageDialog(null, "Filtro não disponível para WebCam");
        } else {
            BufferedImage img1 = filtros.abrirImagem(selecionaImagem());
            exibeImagem(lbImagem1, img1);
            float peso1 = Float.parseFloat(JOptionPane.showInputDialog("Adicao Ponderada", "Percentual da imagem 1"));
            BufferedImage img2 = filtros.abrirImagem(selecionaImagem());
            exibeImagem(lbImagem2, img2);
            float peso2 = Float.parseFloat(JOptionPane.showInputDialog("Adicao Ponderada", "Percentual da imagem 2"));
            exibeImagem(lbSaida, filtros.adicaoPonderada(img1, img2, peso1, peso2));
        }
    }//GEN-LAST:event_jmAdicaoPonderadaActionPerformed

    private void cbLigaWebcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLigaWebcamActionPerformed
        if (!cbLigaWebcam.isSelected()) {
            CAPTURAR = false;
            webcam.close();
        }
    }//GEN-LAST:event_cbLigaWebcamActionPerformed

    private void lbSaidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbSaidaMouseClicked
        if (1 == evt.getButton()) {
            Point p = evt.getLocationOnScreen();
            filtros.pixel(p, imagem);
        }
    }//GEN-LAST:event_lbSaidaMouseClicked

    private void lbImagem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbImagem1MouseClicked
        if (1 == evt.getButton()) {
            Point p = evt.getLocationOnScreen();
            filtros.pixel(p, imagem);
        }
    }//GEN-LAST:event_lbImagem1MouseClicked

    private void jmSobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSobelActionPerformed
        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.sobel(frame));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.sobel(imagem);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmSobelActionPerformed

    private void jmRobertsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmRobertsActionPerformed
        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.roberts(frame));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.roberts(imagem);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmRobertsActionPerformed

    private void jmRobinsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmRobinsonActionPerformed
        if (cbLigaWebcam.isSelected()) {
            CAPTURAR = true;
            new Thread() {
                @Override
                public void run() {
                    while (CAPTURAR) {
                        frame = capturar();
                        exibeImagem(lbImagem1, frame);
                        exibeImagem(lbSaida, filtros.robinson(frame));
                    }
                }
            }.start();
        } else {
            exibeImagem(lbImagem1, imagem);
            imagem = filtros.robinson(imagem);
            exibeImagem(lbSaida, imagem);
        }
    }//GEN-LAST:event_jmRobinsonActionPerformed

    private BufferedImage capturar() {
        webcam = Webcam.getDefault();
        webcam.open();
        return webcam.getImage();
    }

    private void exibeImagem(JLabel lb, BufferedImage imagem) {
        if (cbLigaWebcam.isSelected()) {
            lb.setIcon(stretch(lb.getWidth(), lb.getHeight(), new ImageIcon(imagem)));
        } else {
            if ((imagem.getWidth() > lb.getWidth()) || (imagem.getHeight() > lb.getHeight())) {
                lb.setIcon(stretch(lb.getWidth(), lb.getHeight(), new ImageIcon(imagem)));
            } else {
                lb.setIcon(new ImageIcon(imagem));
            }
        }

    }

    private ImageIcon stretch(int larg, int alt, ImageIcon i) {
        return new ImageIcon(i.getImage().getScaledInstance(larg, alt, Image.SCALE_DEFAULT));
    }

    private String selecionaImagem() {
        int returnVal = jfcSelecionaImagem.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jfcSelecionaImagem.getSelectedFile();
            return file.getAbsolutePath();
        } else {
            System.out.println("File access cancelled by user.");
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainJFrame().setVisible(true);
        });
    }
    private boolean LIMIARIZACAO = false;
    private boolean CAPTURAR = true;
    private static Webcam webcam;
    private BufferedImage frame;
    private BufferedImage imagem;
    private final Filtros filtros;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem cbLigaWebcam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JFileChooser jfcSelecionaImagem;
    private javax.swing.JMenuItem jmAbertura;
    private javax.swing.JMenuItem jmAbrir;
    private javax.swing.JMenuItem jmAdaptativo;
    private javax.swing.JMenu jmAdicao;
    private javax.swing.JMenuItem jmAdicaoPonderada;
    private javax.swing.JMenuItem jmAdicaoSimples;
    private javax.swing.JMenu jmAjuda;
    private javax.swing.JMenuItem jmAlpha;
    private javax.swing.JMenu jmArquivo;
    private javax.swing.JMenu jmBG;
    private javax.swing.JMenuItem jmCanal;
    private javax.swing.JMenu jmCinza;
    private javax.swing.JMenuItem jmCinzaPonderado;
    private javax.swing.JMenuItem jmCinzaSimples;
    private javax.swing.JMenuItem jmConvolucao;
    private javax.swing.JMenuItem jmDilatacao;
    private javax.swing.JMenuItem jmErosao;
    private javax.swing.JMenuItem jmFechamento;
    private javax.swing.JMenu jmFiltros;
    private javax.swing.JMenuItem jmHistograma;
    private javax.swing.JMenu jmIncremento;
    private javax.swing.JMenuItem jmIncrementoAbs;
    private javax.swing.JMenuItem jmIncrementoPercentual;
    private javax.swing.JMenuItem jmLimiarizacao;
    private javax.swing.JMenuItem jmNegativa;
    private javax.swing.JMenuItem jmRoberts;
    private javax.swing.JMenuItem jmRobinson;
    private javax.swing.JMenuItem jmSobel;
    private javax.swing.JMenuItem jmSobre;
    private javax.swing.JMenuItem jmSubtracao;
    private javax.swing.JMenu jmZoom;
    private javax.swing.JMenuItem jmZoomIn;
    private javax.swing.JMenuItem jmZoomOut;
    private javax.swing.JLabel lbImagem1;
    private javax.swing.JLabel lbImagem2;
    private javax.swing.JLabel lbSaida;
    private javax.swing.JMenuBar menu;
    private javax.swing.JPanel painelHistograma;
    // End of variables declaration//GEN-END:variables

}
